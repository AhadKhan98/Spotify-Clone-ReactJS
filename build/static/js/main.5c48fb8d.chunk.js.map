{"version":3,"sources":["spotify.js","Login.js","SidebarOption.js","DataLayer.js","Sidebar.js","Header.js","SongRow.js","Body.js","Footer.js","Player.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["loginURL","join","Login","className","src","alt","target","href","SidebarOption","title","Icon","onClick","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Sidebar","spotify","playlists","dispatch","HomeIcon","SearchIcon","LibraryMusicIcon","items","map","playlist","name","getPlaylist","id","then","pl","type","featured_playlist","handlerFeaturedPlaylist","Header","user","placeholder","display_name","Avatar","images","url","SongRow","track","album","artists","artist","Body","playing","useEffect","console","log","description","PauseCircleFilled","pause","PlayCircleFilled","play","context_uri","getMyCurrentPlayingTrack","r","current_song","item","Favorite","fontSize","MoreHoriz","tracks","uris","res","Footer","getMyCurrentPlaybackState","current_state","is_playing","handlePlayPause","skipToPrevious","skipToNext","Grid","container","spacing","xs","Slider","Player","spotifyAPI","SpotifyWebApi","App","token","_token","parameters","window","location","hash","split","access_code","i","length","parts","getTokenFromUrl","setAccessToken","getMe","getUserPlaylists","Boolean","hostname","match","state","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c48fb8d.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\nconst redirectURI = \"https://spotify-clone-da841.web.app/\";\n\nconst clientID = \"563450ab8c35413faa269f9a24dee9b6\";\n\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-recently-played\",\n  \"user-read-playback-state\",\n  \"user-top-read\",\n  \"user-modify-playback-state\",\n];\n\nexport const getTokenFromUrl = () => {\n  const parameters = window.location.hash.split(\"&\");\n  let access_code = null;\n  for (let i = 0; i < parameters.length; i++) {\n    let parts = parameters[i].split(\"=\");\n    if (parts[0] === \"#access_token\") {\n      access_code = parts[1];\n      break;\n    }\n  }\n  return access_code;\n};\n\nexport const loginURL = `${authEndpoint}?client_id=${clientID}&redirect_uri=${redirectURI}&scope=${scopes.join(\n  \"%20\"\n)}&response_type=token&show_dialog=true`;\n","import React from 'react';\n\nimport './Login.css';\n\nimport { loginURL } from './spotify';\n\nfunction Login() {\n    return (\n        <div className=\"login\">\n            <img src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"\" />\n            <p>Spotify Clone App (Made By <a target=\"_blank\" href=\"http://ahadzai.com/\">Ahad Zai</a>) </p>\n            <p className=\"instructions\"> \n                Instructions: \n                <br />\n                1) Login with your Spotify account.\n                <br />\n                2) Make sure you have a device that is online and available on Spotify.\n                <br />\n                3) The clone app will broadcast your selections straight to your primary device using Spotify's API.\n                <br /><br />\n                Note: The app itself does not play songs, you NEED a device that is online on spotify.\n            </p>\n\n            <a href={loginURL}>LOGIN WITH SPOTIFY</a>\n        </div>\n    )\n};\n\nexport default Login;\n","import React from 'react'\n\nimport './SidebarOption.css';\n\n\nfunction SidebarOption( {title, Icon, onClick} ) {\n    return (\n        <div className=\"sidebarOption\" onClick={onClick}>\n            {Icon && <Icon className=\"sidebarOption__icon\" />}\n            {Icon ? <h4>{title}</h4>: <p>{title}</p>}\n\n        </div>\n    )\n}\n\nexport default SidebarOption\n","import React, {createContext, useContext, useReducer} from 'react';\n\nexport const DataLayerContext = createContext();\n\nexport const DataLayer = ({ initialState, reducer, children }) => (\n    <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </DataLayerContext.Provider>\n);\n\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React from 'react'\n\nimport './Sidebar.css';\n\nimport SidebarOption from './SidebarOption';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport SearchIcon from '@material-ui/icons/Search';\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\nimport { useDataLayerValue } from './DataLayer';\n\nfunction Sidebar() {\n\n    const [{ spotify ,playlists }, dispatch] = useDataLayerValue();\n\n    const handlerFeaturedPlaylist = (playlist) => {\n        spotify.getPlaylist(playlist.id).then(pl => {\n            dispatch({\n                type: 'SET_FEATURED_PLAYLIST',\n                featured_playlist: pl,\n            });\n        })  \n        \n    };\n\n    return (\n        <div className=\"sidebar\">\n            <img className=\"sidebar__logo\" src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"\" />\n            <SidebarOption title=\"Home\" Icon={HomeIcon} /> \n            <SidebarOption title=\"Search\" Icon={SearchIcon} /> \n            <SidebarOption title=\"Your Library\" Icon={LibraryMusicIcon} /> \n            <br />\n            <strong className=\"sidebar__title\">PLAYLISTS</strong>\n            <hr />\n            \n            {playlists?.items?.map((playlist) => (\n                <SidebarOption title={playlist.name} onClick={() => (handlerFeaturedPlaylist(playlist))}/>\n            ))}\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\n\nimport './Header.css';\n\nimport { useDataLayerValue } from './DataLayer';\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Avatar } from \"@material-ui/core\";\n\nfunction Header() {\n    \n    const [{ user }, dispatch] = useDataLayerValue(); \n    return (\n        <div className=\"header\"> \n            <div className=\"header__left\">\n                <SearchIcon />\n                <input placeholder=\"Search for Artistis, Songs, or Podcasts\" type=\"text\"/>\n            </div>\n\n            <div className=\"header__right\">\n                <h4>{user?.display_name}</h4>\n                <Avatar src={user?.images[0]?.url} alt=\"Ahad Khan\" />\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react'\n\nimport './SongRow.css';\n\nfunction SongRow({track=\"test\", onClick }) {\n    return (\n        <div className=\"songRow\" onClick={onClick}>\n            <img className=\"songRow__album\" src={track.album.images[0].url} alt=\"\" />\n            <div className=\"songRow__info\">\n                <h1> {track.name}</h1>\n                <p>\n                    {track.artists.map((artist) => artist.name + ' - ')}\n                    {track.album.name}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default SongRow\n","import React, {useEffect} from 'react'\n\nimport './Body.css';\n\nimport Header from './Header';\n\nimport {useDataLayerValue} from './DataLayer';\nimport { Favorite, MoreHoriz, PlayCircleFilled, PauseCircleFilled } from '@material-ui/icons';\n\nimport SongRow from './SongRow';\n\nfunction Body() {\n\n    const [{ playing,featured_playlist, spotify}, dispatch] = useDataLayerValue();\n\n    useEffect(() => {\n        console.log('PLAYLIST CHANGED BY CLICK', featured_playlist)\n    }, [featured_playlist]);\n\n    const pausePlaying = () => {\n        spotify.pause();\n        dispatch({\n            type: 'SET_PLAYING',\n            playing: false,\n        });\n    }\n    const playPlaylist = (id) => {\n        spotify\n          .play({\n            context_uri: `spotify:playlist:${featured_playlist.id}`,\n          })\n          .then(() => {\n            spotify.getMyCurrentPlayingTrack().then((r) => {\n              dispatch({\n                type: \"SET_CURRENT_SONG\",\n                current_song: r.item,\n              });\n              dispatch({\n                type: \"SET_PLAYING\",\n                playing: true,\n              });\n            });\n          });\n      };\n    \n      const playSong = (id) => {\n          console.log('ITEMID', id);\n        spotify\n          .play({\n            uris: [`spotify:track:${id}`],\n          })\n          .then((res) => {\n            spotify.getMyCurrentPlayingTrack().then((r) => {\n              dispatch({\n                type: \"SET_CURRENT_SONG\",\n                current_song: r.item,\n              });\n              dispatch({\n                type: \"SET_PLAYING\",\n                playing: true,\n              });\n            });\n          });\n      };\n\n    \n    // console.log('FEATURED PLAYLIST!!!!', featured_playlist)\n    return (\n        <div className=\"body\">\n            <Header />\n            <div className=\"body__info\">\n                <img src={featured_playlist?.images[0]?.url} alt=\"\" />\n                <div className=\"body__infoText\">\n                    <strong>PLAYLIST</strong>\n                    <h2>{featured_playlist?.name}</h2>\n                    <p>{featured_playlist?.description}</p>\n                </div>\n            </div>\n\n            <div className=\"body__songs\">\n                <div className=\"body__icons\">\n                    { playing ? (\n                        <PauseCircleFilled onClick={pausePlaying} className=\"body__shuffle\" />\n                    ):(\n                        <PlayCircleFilled onClick={playPlaylist} className=\"body__shuffle\" />\n                    ) }\n                    \n                    <Favorite fontSize=\"large\" />\n                    <MoreHoriz /> \n                </div>\n                {console.log(featured_playlist?.tracks?.items[0])}\n                {featured_playlist?.tracks?.items?.map(item => (\n                    \n                    <SongRow track={item.track} onClick={() => (playSong(item.track.id))}/>\n                ))}\n  \n            </div>\n\n        </div>\n    )\n}\n\nexport default Body\n","import React, { useEffect } from 'react'\n\nimport './Footer.css';\n\nimport {useDataLayerValue} from './DataLayer';\n\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleFilledOutlined';\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleFilledOutlined'\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport { Grid, Slider } from '@material-ui/core';\nimport PlayListPlayIcon from '@material-ui/icons/PlaylistPlay';\nimport VolumeDownIcon from '@material-ui/icons/VolumeDown';\n\n\nfunction Footer() {\n\n    const [{ spotify, current_song, playing }, dispatch] = useDataLayerValue();\n\n\n    useEffect(() => {\n        spotify.getMyCurrentPlaybackState().then(current_state => {\n\n            dispatch({\n                type: 'SET_PLAYING',\n                playing: current_state.is_playing,\n            });\n\n            dispatch({\n                type: 'SET_CURRENT_SONG',\n                current_song: current_state.item,\n            });\n\n        });\n    }, [spotify, current_song, playing]);\n\n    const handlePlayPause = () => {\n        if (playing) {\n            spotify.pause();\n            dispatch({\n                type: 'SET_PLAYING',\n                playing: false,\n            });\n        } else {\n            spotify.play();\n            dispatch({\n                type: 'SET_PLAYING',\n                playing: true,\n            });\n        }\n    };\n\n    const skipNext = () => {\n        spotify.skipToNext();\n        spotify.getMyCurrentPlayingTrack().then((r) => {\n          dispatch({\n            type: \"SET_CURRENT_SONG\",\n            current_song: r.item,\n          });\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          });\n        });\n      };\n\n      const skipPrevious = () => {\n        spotify.skipToPrevious();\n        spotify.getMyCurrentPlayingTrack().then((r) => {\n          dispatch({\n            type: \"SET_CURRENT_SONG\",\n            current_song: r.item,\n          });\n          dispatch({\n            type: \"SET_PLAYING\",\n            playing: true,\n          });\n        });\n      };\n\n    return (\n        <div className=\"footer\">\n            <div className=\"footer__left\">\n                    <img className=\"footer__albumLogo\" src={current_song?.album.images[0].url} alt=\"\" />\n                    <div className=\"footer__songInfo\">\n                    <h4>{current_song?.name}</h4>\n                    <p>{current_song?.artists.map((artist) => artist.name + ' - ')}</p>\n                </div>\n\n            </div>\n\n            <div className=\"footer__center\">\n                <ShuffleIcon className=\"footer__green\" />\n                <SkipPreviousIcon onClick={skipPrevious} className=\"footer__icon\" />\n                {playing ? (\n                    <PauseCircleOutlineIcon fontSize=\"large\" className=\"footer__icon\" onClick={handlePlayPause}/>\n                ) : (\n                    <PlayCircleOutlineIcon fontSize=\"large\" className=\"footer__icon\" onClick={handlePlayPause}/>\n                )}\n                <SkipNextIcon onClick={skipNext} className=\"footer__icon\" />\n                <RepeatIcon className=\"footer__green\" />\n            </div>\n\n            <div className=\"footer__right\">\n                <Grid container spacing={2}> \n                    <Grid item>\n                        <PlayListPlayIcon />\n                    </Grid>\n                    <Grid item>\n                        <VolumeDownIcon />\n                    </Grid>\n                    <Grid item xs>\n                        <Slider />\n                    </Grid>\n                </Grid>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Footer;\n","import React from 'react'\n\nimport './Player.css';\nimport Sidebar from './Sidebar';\nimport Body from './Body';\nimport Footer from './Footer';\n\nfunction Player() {\n    return (\n        <div className=\"player\">\n            <div className=\"player__body\">\n                <Sidebar />\n                <Body />\n                <Footer />\n            </div>\n        </div>\n    )\n}\n\nexport default Player\n","import React, {useEffect} from 'react';\nimport './App.css';\n\nimport Login from './Login';\nimport Player from './Player';\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { useDataLayerValue } from './DataLayer';\n\nconst spotifyAPI = new SpotifyWebApi();\n\nfunction App() {\n\n  const [{token, playlists}, dispatch] = useDataLayerValue();\n\n  useEffect(() => {\n\n    const _token = getTokenFromUrl();\n    window.location.hash = \"\";\n\n    if (_token) {\n\n      dispatch({type: 'SET_TOKEN', token: _token});\n\n      dispatch({type: 'SET_SPOTIFY', spotify: spotifyAPI})\n\n      spotifyAPI.setAccessToken(_token);\n      spotifyAPI.getMe().then(user => {\n        dispatch({type:'SET_USER', user});\n      });\n\n      spotifyAPI.getUserPlaylists().then(playlists => {\n        dispatch({ type:'SET_PLAYLISTS', playlists })\n        spotifyAPI.getPlaylist(playlists.items[0].id).then(playlist => {\n          dispatch({ type:'SET_FEATURED_PLAYLIST', featured_playlist:playlist })\n        })\n        \n      });\n    }\n\n\n\n  }, []);\n\n  return (\n\n    <div className=\"app\">\n      { token ? <Player /> : <Login /> }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\n    user: null,\n    playlists: [],\n    playing: false,\n    item: null,\n    spotify: null,\n    featured_playlist: null,\n    current_song: null,\n    playing: null,\n    // token: 'BQDz3NKJGSgIKDPoxbWOGxe9H2uQbz4WJbBBcI39-0_3BIxK-m7vp-AbHrQVzrMbZTwIrTyvs7zVYSNmSOa5BTZalAn7nMAw3ZdHeoTlFV_BQfYBjKiblPeoh6hTBkzm662kLIIw1FZgiVzOY6be134Hmm0CqpY3buGDOkMGZDJtNQ6Wm0Ob',\n}\n\nconst reducer = (state, action) => {\n\n    switch(action.type) {\n        case 'SET_USER':\n            return {...state, user: action.user }\n\n        case 'SET_TOKEN':\n            return {...state, token: action.token }\n\n        case 'SET_PLAYLISTS':\n            return {...state, playlists: action.playlists}\n\n        case 'SET_SPOTIFY':\n            return {...state, spotify: action.spotify}\n\n        case 'SET_FEATURED_PLAYLIST':\n            return {...state, featured_playlist: action.featured_playlist}\n\n        case 'SET_PLAYING':\n            return {...state, playing:action.playing}\n\n        case 'SET_CURRENT_SONG':\n            return {...state, current_song:action.current_song}\n        \n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {DataLayer} from './DataLayer';\nimport reducer, {initialState} from './reducer';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n      <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}